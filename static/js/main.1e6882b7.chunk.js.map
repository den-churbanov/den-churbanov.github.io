{"version":3,"sources":["file-upload-plugin/components/PreviewImage.js","file-upload-plugin/UploadPlugin.js","index.js"],"names":["PreviewImage","buffer","name","size","idx","upload","progress","link","deleteFile","useState","image","setImage","useEffect","preview","className","onClick","event","src","alt","style","width","unselectable","href","target","UploadPlugin","accept","onUpload","files","setFiles","previews","setPreviews","state","count","loading","setLoading","links","setLinks","setUpload","uploadProgress","setUploadProgress","dragEnter","setDragEnter","input","useRef","uploadBtn","openBtn","current","x","map","i","length","disabled","resetApplicationState","Array","fill","readAllFiles","Object","from","promises","forEach","file","type","match","push","Promise","resolve","reject","reader","FileReader","onload","ev","result","onerror","readAsDataURL","readFile","images","all","then","readers","bytesToSize","bytes","parseInt","Math","floor","log","round","pow","id","parentElement","classList","add","newPreviews","filter","newFiles","setTimeout","remove","dragEnterHandler","preventDefault","dragLeaveHandler","setLink","prevState","newState","slice","showUploadProgress","stopPreviewsDraggable","stopPropagation","onDragEnter","onDragOver","onDragLeave","onDragExit","onDrop","console","dataTransfer","multiple","isArray","join","ref","onChange","click","onDragStart","onDrag","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","storage","ReactDOM","render","task","put","on","snapshot","percentage","bytesTransferred","totalBytes","error","alert","getDownloadURL","url","document","getElementById"],"mappings":"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","file":"static/js/main.1e6882b7.chunk.js","sourcesContent":["import React, {\r\n    useEffect,\r\n    useState\r\n} from 'react'\r\n\r\nexport const PreviewImage = ({buffer, name, size, idx, upload, progress, link, deleteFile}) => {\r\n    const [image, setImage] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //console.log('useEffect called')\r\n        setImage({\r\n            buffer,\r\n            name,\r\n            size,\r\n            idx\r\n        })\r\n    }, [buffer, setImage])\r\n\r\n    const preview = image &&\r\n        <>\r\n            {\r\n                !upload &&\r\n                <div className=\"preview-remove\"\r\n                     onClick={event => deleteFile(event, idx)}>&times;</div>\r\n            }\r\n            <img src={image.buffer}\r\n                 alt={image.name}/>\r\n            <div className={`preview-info ${upload ? 'upload' : ''}`}>\r\n                {upload ?\r\n                    <div className=\"preview-info-progress\" style={{width: progress + '%'}}>\r\n                        <span>{progress + '%'}</span>\r\n                    </div>\r\n                    :\r\n                    <>\r\n                        <span>{image.name}</span>\r\n                        <span>{image.size}</span>\r\n                    </>\r\n                }\r\n            </div>\r\n        </>\r\n\r\n    //console.log('PreviewImage render')\r\n    return (\r\n        <div className=\"preview-image\" unselectable=\"true\">\r\n            {link ?\r\n                <a className=\"preview-link\" href={link} target=\"_blank\">\r\n                    {preview}\r\n                </a>\r\n                :\r\n                preview\r\n            }\r\n        </div>\r\n    );\r\n}","import React, {\r\n    useEffect,\r\n    useRef,\r\n    useState\r\n} from 'react'\r\nimport './upload-plugin.css'\r\nimport {PreviewImage} from \"./components/PreviewImage\";\r\n\r\nexport const UploadPlugin = ({accept = ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'], onUpload}) => {\r\n    const [files, setFiles] = useState([])\r\n    const [previews, setPreviews] = useState([])\r\n    const [loading, setLoading] = useState({\r\n        state: false,\r\n        count: 0\r\n    });\r\n    const [links, setLinks] = useState([])\r\n    const [upload, setUpload] = useState(false)\r\n    const [uploadProgress, setUploadProgress] = useState([])\r\n    const [dragEnter, setDragEnter] = useState(false)\r\n    const input = useRef(null)\r\n    const uploadBtn = useRef(null)\r\n    const openBtn = useRef(null)\r\n\r\n    useEffect(() => {\r\n        if (!openBtn.current) return\r\n        let x = 0\r\n        uploadProgress.map(i => x += i)\r\n        if (x === files.length * 100) {\r\n            openBtn.current.disabled = false\r\n        }\r\n        else {\r\n            if (!openBtn.current.disabled)\r\n                openBtn.current.disabled = true\r\n        }\r\n    }, [uploadProgress])\r\n\r\n    const resetApplicationState = () => {\r\n        setPreviews([])\r\n        setUpload(false)\r\n        setUploadProgress(new Array(files.length).fill(0))\r\n        setLinks(new Array(files.length).fill(''))\r\n        if (uploadBtn.current) uploadBtn.current.disabled = false\r\n    }\r\n\r\n    const openBtnHandler = event => {\r\n        event.preventDefault()\r\n        setFiles([])\r\n        resetApplicationState()\r\n        input.current.click()\r\n    }\r\n\r\n    const inputOnChangeHandler = event => {\r\n        event.preventDefault()\r\n        if (!event.target.files.length) return\r\n        setFiles(Array.from(event.target.files))\r\n        readAllFiles(event.target.files)\r\n    }\r\n\r\n    const readFile = file =>\r\n        new Promise((resolve, reject) => {\r\n            const reader = new FileReader()\r\n            reader.onload = (ev) => {\r\n                resolve({\r\n                    file,\r\n                    buffer: ev.target.result\r\n                })\r\n            }\r\n            reader.onerror = reject;\r\n            reader.readAsDataURL(file)\r\n        })\r\n\r\n    const readAllFiles = function (files) {\r\n        if (files instanceof Object)\r\n            files = Array.from(files)\r\n        setLoading({\r\n            state: true,\r\n            count: files.length\r\n        });\r\n        let promises = [];\r\n        files.forEach(file => {\r\n            if (!file.type.match('image')) return\r\n            promises.push(readFile(file))\r\n        })\r\n        let images = [];\r\n        Promise.all(promises).then(readers => {\r\n            readers.forEach((reader, idx) => {\r\n                images.push({\r\n                    buffer: reader.buffer,\r\n                    name: reader.file.name,\r\n                    size: bytesToSize(reader.file.size),\r\n                    idx\r\n                });\r\n            })\r\n            setPreviews(images)\r\n            setLoading({\r\n                state: false,\r\n                count: 0\r\n            });\r\n        })\r\n    }\r\n\r\n    const bytesToSize = function (bytes) {\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\r\n        if (!bytes) return '0 Byte'\r\n        const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)))\r\n        return `${Math.round(bytes / Math.pow(1024, i))} ${sizes[i]}`\r\n    }\r\n\r\n    const deleteFile = (event, id) => {\r\n        const preview = event.target.parentElement\r\n        preview.classList.add('delete-animation')\r\n        const newPreviews = previews.filter((file, idx) => idx !== id)\r\n        const newFiles = files.filter((file, idx) => idx !== id)\r\n        setTimeout(() => {\r\n            preview.classList.remove('delete-animation');\r\n            setFiles(newFiles)\r\n            setPreviews(newPreviews)\r\n        }, 300);\r\n    }\r\n\r\n    const dragEnterHandler = event => {\r\n        event.preventDefault()\r\n        resetApplicationState()\r\n        setDragEnter(true)\r\n    }\r\n\r\n    const dragLeaveHandler = event => {\r\n        event.preventDefault()\r\n        setDragEnter(false)\r\n    }\r\n\r\n    const dropHandler = event => {\r\n        console.log('dropHandler')\r\n        event.preventDefault()\r\n        setFiles(Array.from(event.dataTransfer.files))\r\n        resetApplicationState()\r\n        readAllFiles(event.dataTransfer.files)\r\n        setDragEnter(false)\r\n    }\r\n\r\n    const uploadFiles = () => {\r\n        //call function to upload files\r\n        onUpload(files, showUploadProgress, setLink);\r\n\r\n        setUpload(true)\r\n        uploadBtn.current.disabled = true\r\n    }\r\n\r\n    const setLink = function (idx, link) {\r\n        setLinks(prevState => {\r\n            let newState = prevState.slice()\r\n            newState[idx] = link\r\n            return newState;\r\n        })\r\n    }\r\n\r\n    const showUploadProgress = (idx, progress) => {\r\n        setUploadProgress(prevState => {\r\n            let newState = prevState.slice()\r\n            newState[idx] = progress\r\n            return newState;\r\n        })\r\n    }\r\n\r\n    const stopPreviewsDraggable = event => {\r\n        event.preventDefault()\r\n        event.stopPropagation()\r\n    }\r\n\r\n    //console.log('UploadPlugin render')\r\n    return (\r\n        <div className=\"upload_plugin_container\">\r\n            <div className=\"card\">\r\n                {\r\n                    dragEnter ?\r\n                        <div className=\"drop-area\"\r\n                             onDragEnter={dragEnterHandler}\r\n                             onDragOver={dragEnterHandler}\r\n                             onDragLeave={dragLeaveHandler}\r\n                             onDragExit={dragLeaveHandler}\r\n                             onDrop={dropHandler}>\r\n                            Перетащите файлы сюда\r\n                        </div>\r\n                        :\r\n                        <div className=\"card-wrapper\"\r\n                             onDragEnter={dragEnterHandler}\r\n                             onDragLeave={dragLeaveHandler}\r\n                             onDragExit={dragLeaveHandler}\r\n                             onDragOver={dragEnterHandler}>\r\n                            <input type=\"file\"\r\n                                   multiple={true}\r\n                                   accept={Array.isArray(accept) ? accept.join(',') : ''}\r\n                                   ref={input}\r\n                                   onChange={inputOnChangeHandler}/>\r\n                            <button className=\"btn\"\r\n                                    onClick={openBtnHandler}\r\n                                    ref={openBtn}>Открыть\r\n                            </button>\r\n                            {previews.length ?\r\n                                <>\r\n                                    <button className=\"btn primary\"\r\n                                            onClick={uploadFiles}\r\n                                            ref={uploadBtn}>\r\n                                        Загрузить\r\n                                    </button>\r\n                                    <div className=\"preview\"\r\n                                         onDragStart={stopPreviewsDraggable}\r\n                                         onDrag={stopPreviewsDraggable}\r\n                                         onDragExit={stopPreviewsDraggable}>\r\n                                        {previews.map((file, idx) =>\r\n                                            <PreviewImage buffer={file.buffer}\r\n                                                          name={file.name}\r\n                                                          size={file.size}\r\n                                                          upload={upload}\r\n                                                          progress={uploadProgress[idx]}\r\n                                                          link={links[idx]}\r\n                                                          idx={idx}\r\n                                                          key={idx}\r\n                                                          deleteFile={deleteFile}\r\n                                            />\r\n                                        )}\r\n                                    </div>\r\n                                </>\r\n                                :\r\n                                loading.state ?\r\n                                    <span className=\"loading\">\r\n                                        {`Файл${loading.count > 1 ? 'ы загружаются' : ' загружается'}...`}\r\n                                    </span> :\r\n                                    null\r\n                            }\r\n                        </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport firebase from 'firebase/app'\nimport 'firebase/storage'\nimport {UploadPlugin} from \"./file-upload-plugin/UploadPlugin\"\nimport './index.css'\n\n/** server storage emulation\n * **/\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDPg-E7U6xRShibqH6ptMbCed_jercNfvQ\",\n    authDomain: \"upload-files-9d7e9.firebaseapp.com\",\n    projectId: \"upload-files-9d7e9\",\n    storageBucket: \"upload-files-9d7e9.appspot.com\",\n    messagingSenderId: \"247597627595\",\n    appId: \"1:247597627595:web:9080a2f6ab6b87428b034e\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig)\nconst storage = firebase.storage()\n\n/**\n * The upload function takes 3 parameters:\n * files - files to upload to the server,\n * showUploadProgress - a callback function that takes two parameters (file id and download percentage),\n * setLink - a callback function that returns id of file\n * and link to this file on the server after uploading file.\n * You can write your own server logic to load the data,\n * but it remains mandatory to call these two callback functions.\n * **/\n\nfunction onUpload(files, showUploadProgress, setLink) {\n    files.forEach((file, idx) => {\n        const ref = storage.ref(`images/${file.name}`)\n        const task = ref.put(file);\n        task.on('state_changed',\n            snapshot => {\n                const percentage = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100)\n                showUploadProgress(idx, percentage)\n            }, error => {\n                alert(error);\n            }, () => {\n                const promise = task.snapshot.ref.getDownloadURL()\n                promise.then(url => {\n                    setLink(idx, url)\n                })\n            })\n    })\n}\n\nReactDOM.render(\n    <UploadPlugin onUpload={onUpload}/>,\n    document.getElementById('container')\n);\n\n"],"sourceRoot":""}